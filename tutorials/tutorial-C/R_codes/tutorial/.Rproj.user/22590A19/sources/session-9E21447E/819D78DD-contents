# WAIC_GNG_M11.R
# RStan output data should be loaded first. 
# actual data = outcome, pressed, cue --> a matrix of numSubjs x numTrials 
# Computing WAIC of the M11 (6 pars model= ep, xi, b, pi, rhoRew, rhoPun)
# This works for M4, M6, and M11
# Programmed by Woo-Young Ahn (www.ahnlab.org)

modelVersion = "M11"  # M4, M6, or M11
lppd = vector("numeric", numSubjs); #initialization. 
pWAIC1 = vector("numeric", numSubjs); #initialization.  pWAIC1 = pWAIC1_part1 + pWAIC_part2
pWAIC1_part1 = vector("numeric", numSubjs); #initialization. pWAIC1_part1 = 2*lppd
pWAIC1_part2 = vector("numeric", numSubjs); #initialization. 
pWAIC2 = vector("numeric", numSubjs); #initialization.  pWAIC2
WAIC = vector("numeric", numSubjs); #initialization. 

numSample_orig = dim(ep)[1]    # orig number of MCMC samples
numSample = 1000#1000  # Random samples for computing WAIC
selectedSeq = sample(1:numSample_orig, numSample);
usePWAIC2 = 1   # use pWAIC2 as recommended? 1 or 0 (default=1)

cat("Model =", modelName, "\n")
cat("Group = ", saveName, "\n")
cat("# of iterations = ", numSample, "\n")

numTrials = 240
numTrPerCue = numTrials / 4
#congRate = 0.8  # congruency of outcomes

# indPars$rho = log(indPars$rho)
# indPars$rhoRew = log(indPars$rhoRew)
# indPars$rhoPun = log(indPars$rhoPun)

wv_g = array(0, c(numSubjs, numSample, 4, numTrPerCue))
wv_ng = array(0, c(numSubjs, numSample, 4, numTrPerCue))
qv_g  = array(0, c(numSubjs, numSample, 4, numTrPerCue))
qv_ng = array(0, c(numSubjs, numSample, 4, numTrPerCue))
sv = array(0, c(numSubjs, numSample, 4, numTrPerCue))
pGo = array(0.5, c(numSubjs, numSample, 4, numTrPerCue))
#outcome = array(NA, c(numSubjs, numSample, numTrials) )
#keyPressed = array(NA, c(numSubjs, numSample, numTrials) )
#cues = array(NA, c(numSubjs, numSample, numTrials) )
#success = array(NA, c(numSubjs, numSample, numTrials) )
#congruentOutcome = array(NA, c(numSubjs, numSample, numTrials) )

#########################################################################################################
# CAUTION!! These cues are based on NEMO data!! Cues in Masip-Guitart 2012 Fig 2 are in different order!!
#########################################################################################################
# actionCorrect = rbind( c(1,2), c(2,1), c(1,2), c(2, 1) )  # (1=correct, 2=incorrect). 4 cues x 2 actions (go, nogo) 
# outcomeAll = rbind( c(1,0), c(1,0), c(0, -1), c(0, -1)) # 4 cues x 2 (correct outcome, incorrect outcome)
# outcome1 = c(1, 0)   # correct outcome, incorrect outcome, correct action (1 for go, 0 for nogo)
# outcome2 = c(1, 0)
# outcome3 = c(0, -1)
# outcome4 = c(0, -1)

# colnames(actionCorrect) = c("go", "nogo")
# colnames(outcomeAll) = c("corrOutcome", "incorrOutcome")
# rownames(actionCorrect) = c("goWin", "nogoWin", "goAvoid", "nogoAvoid")
# rownames(outcomeAll) = c("goWin", "nogoWin", "goAvoid", "nogoAvoid")

# data to be saved:
# trialNum, cue, keyPressed, success, congruentOutcome, outcome, 

# allChoiceDat = NULL

for (i in 1:numSubjs) {
  
  LLperSubj = vector("numeric", numSample)  # for LL for each subject. OLD
  probPerSubj = array(NA, c(numSample, maxTrials))
  tmpDat = subset( dat, subjID == subjList[i] )
  
  for (aIdx in 1:numSample) {  
    
    tmpXi = xi[selectedSeq[aIdx], i]
    tmpEp = ep[selectedSeq[aIdx], i]
    tmpB = b[selectedSeq[aIdx], i]
    
    tmpPi = pi[selectedSeq[aIdx], i]
    tmpRhoRew = rhoRew[selectedSeq[aIdx], i]
    tmpRhoPun = rhoPun[selectedSeq[aIdx], i]
    
    #   if (modelVersion=="M6") {
    #     pi = indPars[i, "pi"] 
    #     rho = indPars[i, "rho"] 
    #   }
    #   if (modelVersion=="M8") {
    #     pi = indPars[i, "pi"] 
    #     epNG = indPars[i, "epNG"]
    #     rho = indPars[i, "rho"] 
    #   }
    
    allCues = tmpDat$cue
    allCh = tmpDat$keyPressed
    #cues[i, aIdx, ] = allCues
    cueTr = c(0,0,0,0)  # cue trial
    
    # cues --> equal number of cues =1,2,3,4
    #allCues = sample( c( rep(1,numTrPerCue), rep(2,numTrPerCue), rep(3, numTrPerCue), rep(4,numTrPerCue)), replace=F)
    #cues[i, aIdx, ] = allCues
    #cueTr = c(0,0,0,0)  # cue trial
    
    for (t in 1:numTrials) {
      currCue = allCues[t]
      cueTr[currCue] = cueTr[currCue] + 1
      tmpTr = cueTr[currCue]  
      
      #       congr = sample( c(1,2), 1, prob=c(congRate, 1-congRate) )  # 1=congr, 2=incongr
      #       congruentOutcome[i,aIdx,t] = congr
      #       
      # WV
      wv_g[i, aIdx, currCue, tmpTr] <- qv_g[i, aIdx, currCue, tmpTr] + tmpB + tmpPi * sv[i, aIdx, currCue, tmpTr]  
      wv_ng[i, aIdx, currCue, tmpTr] <- qv_ng[i, aIdx, currCue, tmpTr] # qv_ng is always equal to wv_ng (regardless of action)      
      
      #pGo[i, aIdx, currCue, tmpTr] = exp(wv_g[i, aIdx, currCue, tmpTr]) / ( exp(wv_g[i, aIdx, currCue, tmpTr]) + exp(wv_ng[i, aIdx, currCue, tmpTr]) )
      pGo[i, aIdx, currCue, tmpTr] = 1 / ( 1 + exp(wv_ng[i, aIdx, currCue, tmpTr] - wv_g[i, aIdx, currCue, tmpTr]) )
      pGo[i, aIdx, currCue, tmpTr] = pGo[i, aIdx, currCue, tmpTr] * (1 - tmpXi) + tmpXi/2  # xi (noise)
      
      
      currCh = allCh[t]  # current choice
      currPGo = pGo[i, aIdx, currCue, tmpTr]; 
      LLperSubj[aIdx] = LLperSubj[aIdx] + log( currPGo*currCh + (1-currPGo)*(1-currCh) ) #log likelihood
      probPerSubj[aIdx, t] = currPGo*currCh + (1-currPGo)*(1-currCh)
      
      #keyPressed[i,aIdx,t] = sample(c(1,0), size=1, prob= c(pGo[i, aIdx, currCue, tmpTr], 1-pGo[i, aIdx, currCue, tmpTr]) ) 
      #tmpCorrect = actionCorrect[currCue, 2-keyPressed[i,aIdx,t] ]  # 1-->1, 0-->2. tmpCorrect ==> 1=correct or 2=incorrect
      #tmpCorrectModified = ifelse(congr==1, tmpCorrect, 3-tmpCorrect)  # switch correctness based on congr
      #success[i,aIdx,t] = 2- tmpCorrect   # tmpCorrect ==1 --> success =1, tmpCorrect==2 --> success=0
      #outcome[i,aIdx,t] = outcomeAll[ currCue, tmpCorrectModified]
      
      #cat("trial=", t, ", cue=", currCue,", cue tr=", tmpTr, ", pGo=", pGo[i, currCue, tmpTr], 
      #    ", pressed=", keyPressed[i,t], ", correct=", tmpCorrect, ", congr=", congr, ", outcome=", outcome[i,t], "\n")  # print
      
      if (tmpTr < numTrials/4) {
        
        # update action values
        #if (pressed[i,aIdx,t]) { # update go value only w/ RW
        if (pressed[i,t]) { # update go value only w/ RW
          if (modelVersion == "M11") {
            # if gain outcome
            if (outcome[i,t] >=0) {
              sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoRew * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
              qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoRew * outcome[i,t] - qv_g[i, aIdx, currCue, tmpTr]);  
              qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr]  # no change  
            } else {  # loss outcome
              sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoPun * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
              qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoPun * outcome[i,t] - qv_g[i, aIdx, currCue, tmpTr]);  
              qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr]  # no change  
            }
          } else {  # if Model != M11
            # after receiving feedback, update sv[t+1]
            sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRho * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
            qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRho * outcome[i,t] - qv_g[i, aIdx, currCue, tmpTr]);  
            qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr]  # no change  
          }
        } else { # Not pressed --> update no-go value w/ RW, update go value w/ other terms
          if (modelVersion !="M8") { # for all models except M8 --> separate learning rate for rew and pun
            if (modelVersion == "M11") {  # M11
              if (outcome[i,t] >=0) {  # gain trials
                # after receiving feedback, update sv[t+1]
                sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoRew * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
                qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr]  # no change
                qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoRew * outcome[i,t] - qv_ng[i, aIdx, currCue, tmpTr])
              } else { # loss trials
                sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoPun * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
                qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr]  # no change
                qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRhoPun * outcome[i,t] - qv_ng[i, aIdx, currCue, tmpTr])
              }
            } else {  # for M6 or M10
              # after receiving feedback, update sv[t+1]
              sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRho * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
              qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr]  # no change
              qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr] + tmpEp * (tmpRho * outcome[i,t] - qv_ng[i, aIdx, currCue, tmpTr])
            }
          } else {  # for M8 (separate learning rate)
            # after receiving feedback, update sv[t+1]
            sv[i, aIdx, currCue, tmpTr+1] = sv[i, aIdx, currCue, tmpTr] + tmpEpNG * (tmpRho * outcome[i,t] - sv[i, aIdx, currCue, tmpTr ]); 
            qv_g[i, aIdx, currCue, tmpTr+1] <- qv_g[i, aIdx, currCue, tmpTr]  # no change
            qv_ng[i, aIdx, currCue, tmpTr+1] <- qv_ng[i, aIdx, currCue, tmpTr] + tmpEpNG * (tmpRho * outcome[i,t] - qv_ng[i, aIdx, currCue, tmpTr])
          }
        }
      } else {
        #cat("cue=", currCue, "has all trials \n")
      }  
      #print("TR=", t, ", pGo[1]=",  pGo[1], ", pGo[2]=",  pGo[2], ", pGo[3]=",  pGo[3], ", pGo[4]=",  pGo[4] )
      
    } # end of t loop
  } # end of aIdx loop
  
  lppd[i] = sum( log( apply(probPerSubj, 2, mean) ), na.rm=T )
  
  pWAIC1_part1[i] = 2* lppd[i]
  pWAIC1_part2_tmp = apply( log(probPerSubj), 2, mean)
  pWAIC1_part2[i] = -2 * sum( pWAIC1_part2_tmp, na.rm=T )
  pWAIC1[i] = pWAIC1_part1[i] + pWAIC1_part2[i] 
  
  pWAIC2_tmp = log(probPerSubj)
  pWAIC2[i] = sum( apply(pWAIC2_tmp, 2, var), na.rm=T)  # pWAIC2
  
  if (usePWAIC2) {
    WAIC[i] = -2 * ( lppd[i] - pWAIC2[i] ) 
  } else {
    WAIC[i] = -2 * ( lppd[i] - pWAIC1[i] ) 
  }
  cat("subject ", i, " out of ", numSubjs, " done. \n" )
  
  # only save the last aIdx data... 
  #allChoiceDat = rbind(allChoiceDat, cbind(1:240, allCues, keyPressed[i, aIdx, ], success[i, aIdx, ], congruentOutcome[i, aIdx, ], outcome[i, aIdx, ], i  ) )
  
  
} # end of i loop

# print WAIC
WAIC_overall = sum(WAIC)       
cat("data name = ", saveName, "\n")
cat("WAIC=", WAIC_overall, "\n")
hist(WAIC, main="Histogram of WAIC over all subjects")
hist(pWAIC2)


#colnames(allChoiceDat) = c("trialNum", "cue", "keyPressed", "success", "congruentOutcome", "outcome", "subjID")

# # save a subject's data
# allDat = NULL
# for (i in 1:numSubjs) {
#   tmpDat = cbind( 1:numTrials, cues[i, ], keyPressed[i, ], success[i, ], congruentOutcome[i, ], outcome[i, ], 
#                 xi, ep, b, pi, rho, paste("S", i, sep="") )
#   allDat = rbind(allDat, tmpDat)
# }
# colnames(allDat) = c("trialNum", "cue", "keyPressed", "success", "congruentOutcome", "outcome", 
#                      "xi", "ep", "b", "pi", "rho", "subjID")  
# if (saveData) {
#   write.table(allDat, file= paste("GNG_simulData_N", numSubjs,"_xi", xi, "ep", ep, "b", b, "pi", pi, "rho", rho, 
#                                 ".txt", sep=""), sep="\t", row.names=F )
# }
# 
# tmpPGo = apply(pGo, c(1,3,4), mean)  # average across agents --> 44x4x60 matrix
# pGoMean = apply(tmpPGo, c(2,3), mean) # average across subjects --> 4x60 matrix
# #pGoMean = apply(pGo, c(2,3), mean)  # average across subjects
# tmpPGoSD = apply(pGo, c(1,3,4), sd)  # average across agents --> 44x4x60 matrix
# pGoSD = apply(tmpPGoSD, c(2,3), sd) # average across subjects --> 4x60 matrix
# #pGoSD = apply(pGo, c(2,3), sd)  # average across subjects
# 
# 
